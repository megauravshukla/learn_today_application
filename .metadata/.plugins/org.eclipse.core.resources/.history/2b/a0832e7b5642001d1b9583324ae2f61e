package com.dxc.luxoft.service.Impl;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.dxc.luxoft.dto.StudentTO;
import com.dxc.luxoft.entities.Courses;
import com.dxc.luxoft.entities.Roles;
import com.dxc.luxoft.entities.Students;
import com.dxc.luxoft.entities.UserDetail;
import com.dxc.luxoft.repositories.CourseRepository;
import com.dxc.luxoft.repositories.RolesRepository;
import com.dxc.luxoft.repositories.StudentRepository;
import com.dxc.luxoft.repositories.UserDetailsRepository;
import com.dxc.luxoft.service.StudentService;
import com.dxc.luxoft.utill.CommonConstants;
import com.dxc.luxoft.utill.ResponseTO;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class StudentServiceImpl implements StudentService {

	@Autowired
	private StudentRepository stuRepo;

	@Autowired
	private CourseRepository courseRepo;

	@Autowired
	private UserDetailsRepository userDeatilsRepo;

	@Autowired
	private RolesRepository rolesRepo;
	
	@Autowired
	private PasswordEncoder encoder;

	@Override
	public ResponseTO registerStudents(StudentTO stuTO) {
		ResponseTO response = new ResponseTO();
		try {
			Students stu = new Students();
			stu.setStudentName(stuTO.getStudentName());
			stu.setStudentEmail(stuTO.getStudentEmail());
			stu.setOptedCourse(stuTO.getOptedCourse());
			stu.setQualification(stuTO.getQualification());
			stu.setTrainer(stuTO.getTrainer());
			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
			LocalDateTime now = LocalDateTime.now();
			System.out.println(dtf.format(now));
			stu.setStartDate(dtf.format(now));
			stu.setCourse(courseRepo.findByTitle(stuTO.getOptedCourse()).get(0));
			stuRepo.save(stu);
			UserDetail userDetails = new UserDetail();
			userDetails.setUserName(stuTO.getStudentEmail());
			userDetails.setPassword(stuTO.getPassword());
			userDetails.setUserType(CommonConstants.STUDENT_USER_TYPE);
			userDeatilsRepo.save(userDetails);
			Roles roles = new Roles();
			roles.setRole(CommonConstants.STUDENT_ROLE_NAME);
			roles.setUser(userDeatilsRepo.findByUserName(stuTO.getStudentEmail()).get(0));
			rolesRepo.save(roles);
			response.setResponse("Student Registered Successfully...");
			response.setStatus(HttpServletResponse.SC_OK);
		} catch (Exception e) {
			log.error("Error wjile Registering the trainer...");
			response.setResponse("Error while Registering the Student...");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		}
		return response;
	}

	@Override
	public Courses findCourseById(int id) {
		Optional<Courses> courseList = null;
		Courses courses = null;
		try {
			courseList = courseRepo.findById(id);
			if (courseList.isPresent()) {
				courses = courseList.get();
			}
		} catch (Exception e) {
			log.error("Error While retriving courses by id...");
		}
		return courses;
	}

}
